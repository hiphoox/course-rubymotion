Chapter 13 - Custom Cells
=========================

In the last chapter we build our News section using a *UITableView*. In this section we are going to improve that section using Custom Cells. Our Designer has send us an improved design to display our news. 

We used a standard *UITableViewCell* to display the news item information, both when you need something more customizable, you must create a subclass of *UITableViewCell*. You will find when developing iOS apps that is a very common task. 


Setting up the project
---------------------

Unzip the file *ch13-custom_cells_resources*, run the app and you will see that we have the app as we leave it in last chapter.

.Current Application
image::Resources/ch13-CustomCells/ch13_01_app.png[Current Application]

We will use it as a base for this workshop.


Creating a subclass of UITableViewCell
-------------------------------------

In the *views* folder create a file called *news_table_view_cell.rb* with this code:

[source, ruby]
-------------------
class NewsTableViewCell < UITableViewCell

  attr_accessor :title, :subtitle, :image_name

  NEWS_CELL_REUSE_ID = "NewsTableViewCell"
    
end
------------------

We are creating a UITableViewCell subclass named *NewsTableViewCell* with three properties: title, subtitle, and image_name. Those are the data that our cell is going to display. We are also adding a constant to store the reuse identifier of the cell.

If you remember, in the last chapter we were creating the cell in the NewsViewController, specifically in the *tableView:cellForRowAtIndexPath:* method. Now we are going to put that logic inside our cell. Thus, decoupling it from our View Controller. Add this method to the NewsTableViewCell:


[source, ruby]
------------------
def self.cellForNewsItem(news_item, inTableView:tableView)

  cell = tableView.dequeueReusableCellWithIdentifier(NEWS_CELL_REUSE_ID) || NewsTableViewCell.alloc.initWithStyle(UITableViewCellStyleDefault, reuseIdentifier:NEWS_CELL_REUSE_ID)
  cell.title = news_item.title
  cell.subtitle = news_item.brief    
  cell.image_name = news_item.image
  cell.selectionStyle = UITableViewCellSelectionStyleNone
  cell
end
-----------------


We are dequeuing our cell from the table view, in case there is no cell already queue we create it. And the we are extracting the news item information from the *news_item* object passed as argument and fill our cell with it.

Now, in the *NewsViewController*, change the method *tableView:cellForRowAtIndexPath:* to this:

[source, ruby]
-----------------
def tableView(tableView, cellForRowAtIndexPath:indexPath) 
   
  news_item = @news[indexPath.row]      
  NewsTableViewCell.cellForNewsItem(news_item, inTableView:tableView)
end  
----------------

Run your app.

.Empty Cell
image::Resources/ch13-CustomCells/ch13_02_empty_cell.png[Empty Cell]


Adding visual components
-----------------------

The table is empty. Why? Because we need to create the components of our cell to display the data. A UITableViewCell is an UIView. We have seen that we can create custom view and take advantage of the *drawRect:* method to draw visual components inside our view. Althought we can do the same inside a cell, is better to use composition of UIViews with the *addSubview* method, remember that a cell is reused for all rows in a table so we need to be able to refresh the components without the need of calling *setNeedDisplay*.

UIView has a method called *layoutSubviews* that method can be used to create and layout its subviews. We are going to use it to display the news item information:

[source, ruby]
--------------------
def layoutSubviews      

  if @background_image.nil?

    @background_image = imageViewWithBackground
    self.addSubview(@background_image)
  end    
end  

def imageViewWithBackground

UIImageView.alloc.initWithImage(UIImage.imageNamed("bgNewsCell"))
end  
-------------------

We are adding an image as a background. Notice that we are checking if the *@background_image* does not exist already. Why? Remember that there is only one instance of the cell in our table and we don't want to add N background images, is enough to add it once.

Run the app.

.Cell Background
image::Resources/ch13-CustomCells/ch13_03_cell_background.png[Cell Background]

It really looks bad. Our designer has gave us a background image with a height of 200px. And the default height of a Cell is of 44px. That is the reason that the images overlaps. Let's fix it. Open the NewsViewController and we are going to add another *UITableViewDelegate* method to define a new cell height:

[source, ruby]
------------------- 
def tableView(tableView, heightForRowAtIndexPath:indexPath)

  200.0
end  
------------------ 

Now you'll see all the cells with their correct background:

.Cell Height
image::Resources/ch13-CustomCells/ch13_04_cell_height.png[Cell Height]


It's time to add more components. We are going to start with the title:

[source, ruby]
--------------------
def layoutSubviews    
    
  if @background_image.nil?
    @background_image = imageViewWithBackground
    self.addSubview(@background_image)
  end  
  @title_label = labelWithTitle    
  self.addSubview(@title_label)    
end 


def labelWithTitle

  title_label = UILabel.alloc.initWithFrame([[10, 10], [300, 40]])
  title_label.font = UIFont.fontWithName("Helvetica", size:24)
  title_label.textColor = UIColor.redColor    
  title_label.adjustsFontSizeToFitWidth = true
  title_label.text = @title
  title_label.backgroundColor = UIColor.clearColor
  title_label
end
------------------ 

We are inserting a label with the title in Red color. Run your app:

.Cell Title
image::Resources/ch13-CustomCells/ch13_05_cell_title.png[Cell Title]


Wow, the titles are all messed up. Again, there is only one instance of the cell and if you just add views to it, you will end with a lot of subviews. We can do two thing to fix this:
- Do not create a UILabel every time, just once and modify it later for each news title.
- Remove the previous UILabel.

We are going to do the second option. Create this method:

[source, ruby]
---------------
def removePreviousViews    

  if @title_label
    @title_label.removeFromSuperview
  end      
end
---------------

And call it from *layoutSubviews*:

[source, ruby]
---------------
def layoutSubviews   
     
  removePreviousViews

  if @background_image.nil?

    @background_image = imageViewWithBackground
    self.addSubview(@background_image)
  end  

  @title_label = labelWithTitle    
  self.addSubview(@title_label)    
end 
--------------


Run the app, now the titles do not overlap:

.Cell Titles
image::Resources/ch13-CustomCells/ch13_06_cell_title_right.png[Cell Titles]


Now we can add the other data: the subtitle and the image (if any) on the news item:

[source, ruby]
---------------
def imageViewWithNewsImage

  news_image_view = UIImageView.alloc.initWithImage(UIImage.imageNamed(@image_name))
  news_image_view.frame = ([[10,60], [115,115]])
  news_image_view
end  

def labelWithSubtitle

  unless @image_name.empty?

    subtitle_label = UILabel.alloc.initWithFrame([[140, 60], [170, 115]])
  else

    subtitle_label = UILabel.alloc.initWithFrame([[10, 60], [300, 115]])  
  end  

  subtitle_label.font = UIFont.fontWithName("Helvetica", size:18)
  subtitle_label.text = @subtitle
  subtitle_label.numberOfLines = 4
  subtitle_label.backgroundColor = UIColor.clearColor
  subtitle_label
end
--------------

Now update the *layoutSubviews* to call these methods. Notice that we are only adding the image view if the news item has an image. Not all news items have an associated image:

[source, ruby]
--------------
def layoutSubviews   
 
  removePreviousViews  

  if @background_image.nil?

    @background_image = imageViewWithBackground
    self.addSubview(@background_image)
  end  

  unless @image_name.empty?

    @image_view = imageViewWithNewsImage   
    self.addSubview(@image_view)    
  end  

  @title_label = labelWithTitle    
  @subtitle_label = labelWithSubtitle        
  self.addSubview(@title_label)
  self.addSubview(@subtitle_label)
end  
--------------

And, finally, update the *removePreviousViews*:

[source, ruby]
--------------  
def removePreviousViews    

  if @title_label
    @title_label.removeFromSuperview
  end      

  if @image_view
    @image_view.removeFromSuperview 
  end  

  if @subtitle_label
    @subtitle_label.removeFromSuperview
  end  
end
-------------

Run your app, now we have a custom cell to display our news items:

.Custom Cell Completed  
image::Resources/ch13-CustomCells/ch13_07_final_app.png[Custom Cell Completed]