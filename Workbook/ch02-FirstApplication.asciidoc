Chapter 02 - First Application
==============================

Time Zone Converter App
-----------------------

Time is one of the most precious resources that we have, and for travelers around the world it's essential to keep synced between one place and another so they can accomplish goals and requirements on time.
So we are going to build and application for them, so they can check their local time and the time in the place where they are traveling. The app should cover the following functionality:

- Display local time zone
- Know time zone against any other time zone

First at all we need to create our application with ruby motion so let's run the following command in your terminal:

[source, sh]
--------------------------------------
$ motion create TimeZoneConverter
--------------------------------------

And then take a look inside

[source, sh]
--------------------------------------
$ cd TimeZoneConverter

$ ls
--------------------------------------

You will see the following directories created

--------------------------------------
Rakefile app resources spec
--------------------------------------

Now feel free to execute the following command:

[source, sh]
--------------------------------------
$ rake
--------------------------------------

If everything goes well, you will see an ugly black window.

.Empty Application
image::resources/ch02-FirstApplication/image1.png[Empty Application]

[NOTE]
Please add assets to the resources folder of your project. You can find them on resources folder, there is an 'images' folder with the assets necessary for this chapter.

[NOTE]
Please add the following ruby files to the app folder: root_view_utilities.rb and time_offset.rb which help us in this chapter.  

View Controller
~~~~~~~~~~~~~~~

A view controller class provides a quite useful mechanism to manage views in iOS applications; it can coordinate efforts with the model and other view controllers in order to build an entire application.

Adding a View Controller
~~~~~~~~~~~~~~~~~~~~~~~~

Open your file *app_delegate.rb* in app folder and add the following highlighted code:

[WARNING]
Adding code ahead. 

["source","ruby", args="-O \"hl_lines=4 5 6\""]
---------------------------------------------------------------------------------
class AppDelegate
 
 def application(application, didFinishLaunchingWithOptions:launchOptions)
    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds) 
    @window.rootViewController = RootViewController.alloc.init
    @window.makeKeyAndVisible 
    true
  end

end
---------------------------------------------------------------------------------

Now create a new file named *root_view_controller.rb* in app folder and add the following code:


[source, ruby]
--------------
class RootViewController < UIViewController
  
  def viewDidLoad
    view.backgroundColor = UIColor.scrollViewTexturedBackgroundColor
  end	

end
--------------

Save your file and run the rake command:

[source, sh]
--------------------------------------
$ rake
--------------------------------------

You should see a gray styled view. Congratulations, you have added your first View Controller, it wasn't really that hard, was it?

.View Controller Added
image::resources/ch02-FirstApplication/image2.png[View Controller Added]

It's time to take a look to the file named *root_view_uitilities.rb* which contains the following UI elements:

- UILabel 
- UIButton
- UITextField
- UIStepper

Each method receive the position where the UIControl should be display and return the UIcontrol.

[source, ruby]
--------------
def time_label(xPosition,yPosition)

  label = UILabel.alloc.initWithFrame(CGRectMake(xPosition,yPosition,200,50))
  label.backgroundColor = UIColor.clearColor;
  label.text = "UTC offset"
  label.textColor = UIColor.whiteColor;
  label

end

def select_time_zone_Button (xPosition,yPosition)
  
  button = UIButton.buttonWithType(UIButtonTypeCustom)
  button.frame = CGRectMake(xPosition,yPosition,85,73)
  button.setBackgroundImage (UIImage.imageNamed("btnSelect.png"),forState:UIControlStateNormal)
  button.setTitle("Convert",forState:UIControlStateNormal)
  button

end


def time_zone_text_field (xPosition,yPosition)

  textField = UITextField.alloc.initWithFrame(CGRectMake(xPosition,yPosition, 170, 30))
  textField.borderStyle = UITextBorderStyleRoundedRect
  textField.font = UIFont.systemFontOfSize(15)
  #textField.setUserInteractionEnabled (false)

  textField

end

def ui_stepper (xPosition,yPosition)

  stepper = UIStepper.alloc.initWithFrame (CGRectMake(xPosition,yPosition, 30, 30))
  stepper.addTarget(self ,action: :'stepperPressed:', forControlEvents:UIControlEventValueChanged)

  stepper

end
--------------

Save your file and compile the project to see if everything goes well, and then open the file *root_view_controller.rb* We are going to add our controls, then add the following highlighted code: 

[WARNING]
Adding code ahead. 

["source","ruby", args="-O \"hl_lines=3 4 5 6 7 8 9 10 11 12 13 14 15 16 19 20 21 22 23 24 25 26\""]
--------------
class RootViewController < UIViewController
  
  def set_current_time

    calendar = NSCalendar.alloc.initWithCalendarIdentifier(NSGregorianCalendar)
    @offsetDate = NSDate.date
    components = calendar.components (NSMinuteCalendarUnit,fromDate:@offsetDate)   
    
    @stepper.value = components.minute 
    @currentTimeLabel.text = month_year_string(@offsetDate)
  end

  def set_remote_time_zone

    @remoteTimeZoneTextField.text = "Europe/Zurich"
    @remoteTimeZoneTextField.returnKeyType = UIReturnKeyDone

  end

  def set_remote_time

    convertZone = NSTimeZone.timeZoneWithName(@remoteTimeZoneTextField.text)

    formatter = NSDateFormatter.alloc.init
    formatter.setDateFormat('HH:mm')
    formatter.setTimeZone(convertZone)

    dateFormat = formatter.stringFromDate(@offsetDate)

    @convertDate = formatter.dateFromString(dateFormat)
    @remoteTimeLabel.text = "UTC "+(convertZone.secondsFromGMT/3600).to_s + "  "+ dateFormat

  end
  	  	  
  def viewDidLoad  

    @currentTimeLabel =  time_label(25,65)
    @stepper = ui_stepper (220,75)

    @remoteTimeZoneTextField = time_zone_text_field(25,185)
    @remoteTimeZoneTextField.delegate = self
    @remoteTimeLabel =  time_label(25,210)

    view.addSubview(@currentTimeLabel)
    view.addSubview(@remoteTimeZoneTextField)
    view.addSubview(@remoteTimeLabel)
    view.addSubview(@stepper)

    set_current_time
    set_remote_time_zone

    view.backgroundColor = UIColor.scrollViewTexturedBackgroundColor

  end 	

end
--------------

Run your program and you should see at the top an UILabel with your current time zone also an UIStepper which will be useful to change this date, and at least and UITextField indicating the remote Time Zone in this case Zurich, feel free to put any other of the following know time zones

- America/Cancun
- Asia/Tokyo
- Europe/Rome
- Pacific/Fiji

.Controls Added
image::resources/ch02-FirstApplication/image3.png[Controls Added]

Let stop one moment right here, to see the properties of the "UILabel" that we just added. Without quitting the simulator, hold the ‘command’ key and hover the mouse on simulator screen. You can see a red-bordered box appears among the application elements, select the first Time Zone area, the interactive console should display the instance corresponding to that label.


---------------------------------------------------------------------------------
(#<UILabel:0x9447e60>)> 
---------------------------------------------------------------------------------

And then explore the text property of the UILabel

---------------------------------------------------------------------------------
(#<UILabel:0x9447e60>)> self.text
---------------------------------------------------------------------------------


It should return a string

---------------------------------------------------------------------------------
=> "America/Mexico_City"
---------------------------------------------------------------------------------

Let's say that we are extremely curious and we want to know the class of the "text" property from UILabel:

---------------------------------------------------------------------------------
(#<UILabel:0x9447e60>)> self.text.class
=> String
---------------------------------------------------------------------------------

As we may expect its a String, but now what if we want to know the superclass of the "text" property from UILabel:

---------------------------------------------------------------------------------
(#<UILabel:0x9447e60>)> self.text.superclass
=> NSMutableString
---------------------------------------------------------------------------------

Now what if we look for the "String" ancestors, type the following:

---------------------------------------------------------------------------------
(#<UILabel:0x9447e60>)> String.ancestors
---------------------------------------------------------------------------------

What are those classes that appears? Yes you are right those are from the Cocoa Framework.

---------------------------------------------------------------------------------
=> [String, NSMutableString, NSString, Comparable, NSObject, Kernel]
---------------------------------------------------------------------------------

We also can see the available methods, type the following in your terminal:

---------------------------------------------------------------------------------
(#<UILabel:0x9447e60>)> methods
---------------------------------------------------------------------------------

Well, you can see many of them, but yes we can use grep, to find something more specific:

---------------------------------------------------------------------------------
(#<UILabel:0x9447e60>)> methods.grep(/class/)
---------------------------------------------------------------------------------

If you want to return to the main session, you can enter the following command:

---------------------------------------------------------------------------------
(#<UILabel:0x9591580>)> quit
---------------------------------------------------------------------------------

Type self, so you can be sure that you are in the main session:

---------------------------------------------------------------------------------
(main)> self            
=> main
(main)> 
---------------------------------------------------------------------------------

So far we have discovered some interesting things, also we can find the instance variables of our RootViewController:

---------------------------------------------------------------------------------
(main)> RootViewController.instance_variables
=> [:__classpath__]
---------------------------------------------------------------------------------

And of course we can find out all the elements of the application

---------------------------------------------------------------------------------
(main)> UIApplication.sharedApplication.keyWindow.rootViewController.view.subviews
=> [#<UILabel:0x95448e0>, #<UILabel:0x9544c30>, #<UIButton:0x9545110>, #<UILabel:0x9537eb0>
---------------------------------------------------------------------------------

and then recursive elements:

---------------------------------------------------------------------------------
(main)> UIApplication.sharedApplication.keyWindow.recursiveDescription
---------------------------------------------------------------------------------

You can use 'include'? from Array to ask if a method exists:

---------------------------------------------------------------------------------
[].methods.include? :[]
---------------------------------------------------------------------------------

And also to ask for an Objetive-C Method:

---------------------------------------------------------------------------------
[].methods.include?(:'objectAtIndex:')
---------------------------------------------------------------------------------

It’s time to add a button that shows time for remote time zone, open the *root_view_controller.rb* and add the following highlighted code on your *viewDidLoadMethod*: 

[WARNING]
Adding code ahead. 

["source","ruby", args="-O \"hl_lines=19 20 21 22 23 24 25\""]
--------------

def viewDidLoad  

    @currentTimeLabel =  time_label(25,65)
    @stepper = ui_stepper (220,75)

    @remoteTimeZoneTextField = time_zone_text_field(25,185)
    @remoteTimeZoneTextField.delegate = self
    @remoteTimeLabel =  time_label(25,210)

    chooseconvertButton = select_time_zone_Button(220,120)
    chooseconvertButton.addTarget(self, action: :'set_remote_time', forControlEvents:UIControlEventTouchUpInside)

    view.addSubview(@currentTimeLabel)
    view.addSubview(@remoteTimeZoneTextField)
    view.addSubview(@remoteTimeLabel)
    view.addSubview(@stepper)
    view.addSubview(chooseconvertButton)

    set_current_time
    set_remote_time_zone

    view.backgroundColor = UIColor.scrollViewTexturedBackgroundColor

end  

--------------

Now add the following method to your *root_view_controller.rb* file

--------------
def stepperPressed (sender)

  calendar = NSCalendar.alloc.initWithCalendarIdentifier(NSGregorianCalendar)

  components = calendar.components (NSMinuteCalendarUnit,fromDate:@offsetDate)   
  minute = components.minute

  if minute > @stepper.value
    @offsetDate = NSDate.alloc.initWithTimeInterval(-60,sinceDate:@offsetDate)
  else 
    @offsetDate = NSDate.alloc.initWithTimeInterval(60,sinceDate:@offsetDate)
  end

  components = calendar.components (NSMinuteCalendarUnit,fromDate:@offsetDate)
  @stepper.value = components.minute
  @currentTimeLabel.text = month_year_string(@offsetDate)
end
--------------

Next compile your application; you should see a big black button, don’t hesitate and try it.

.UIPicker Added
image::resources/ch02-FirstApplication/image4.png[UIPicker Added]

Styling the App
~~~~~~~~~~~~~~~

I think that the style of our application does not reflect the adventurous spirit that it should; maybe with some little improvements we can change that.

Run the application with the rake command

[source, sh]
------------
$ rake
------------

Now you should see REPL in your console:

[source, sh]
------------
Create ./build/iPhoneSimulator-6.0-Development/TimeZoneConverter.dSYM
Simulate ./build/iPhoneSimulator-6.0-Development/TimeZoneConverter.app
(main)>
------------

Now hold ‘command’ key and hover mouse on simulator screen. You can see a red-bordered box appears among the application elements, select the first Time Zone area, the interactive console should display the instance corresponding to that label:

[source, sh]
------------
Build ./build/iPhoneSimulator-6.0-Development
Simulate ./build/iPhoneSimulator-6.0-Development/TimeZoneConverter.app
(#<UILabel:0x956a650>)>
------------

Now it's time to add something fresh to our application as we see it running, yes you read that right! Type the following scrip in you REPL:

[source, ruby]
--------------
self.font = UIFont.fontWithName("Noteworthy-Bold",size:18)
--------------
 
.UIPicker Added
image::resources/ch02-FirstApplication/image6.png[UIPicker Added]

and hit enter, and voila !! The font has changed, but you may not like it, so try with different fonts and sizes. Here there are some of them:

* Georgia-Italic
* MarkerFelt-Thin
* HelveticaNeue-Medium

Since the creation of the apple store the are many apps to choose from, the app store is not the wild West that it used to be, so we are going to give some personality to our app: 


First, copy the assets from the chapter two directory, and put them into the Resources directory, and the in your *root_view_controller.rb* change the following line in your *viewDidLoad* method:

[source, ruby]
--------------
view.backgroundColor = UIColor.scrollViewTexturedBackgroundColor
--------------

for this one:
[source, ruby]
--------------
view.backgroundColor = UIColor.colorWithPatternImage(UIImage.imageNamed("bgApp.png"))
--------------

.Stylish App
image::resources/ch02-FirstApplication/image7.png[Stylish App]

We should add some personality to our buttons, open your file *root_view_uitilities.rb* and replace the following method *select_time_zone_Button*: 

[source, ruby]
--------------
def select_time_zone_Button (xPosition,yPosition)
 
  button = UIButton.buttonWithType(UIButtonTypeCustom)
  button.frame = CGRectMake(xPosition,yPosition,85,73)
  button.setBackgroundImage (UIImage.imageNamed("btnSelect.png"),forState:UIControlStateNormal)
  button.setTitle("Select",forState:UIControlStateNormal)
  button
end
-------------


Challenge - Dismiss KeyBoard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Well, I bet that you have tried to press the "Done" button on the keyboard, and well nothing happens, well you should blame apple for this, but don't worry
apple want you to take care of it so they provides us a delegate method when "DONE" button A.K.A (Return key) it's pressed, so you only have to add the following method
to your *root_view_controller.rb* file.

[source, ruby]
--------------
def textFieldShouldReturn (textField)
  @remoteTimeZoneTextField.resignFirstResponder
end
--------------

Challenge - Dismiss on touch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

How does that fancy app's dismiss the keyboard when other area it's touched ?, well as you may guess it not automatic, so you should add a "Tap Gesture Recognizer" 
to sense when other area of the screen it's touched, add the following lines which add a tap gesture to the RootViewController view to the *viewDidLoad* method

--------------
singleTap = UITapGestureRecognizer.alloc.initWithTarget(self, action: :'handleSingleTap')
self.view.addGestureRecognizer(singleTap)
--------------

So it's up to you to implement the *handleSingleTap* method to dismiss the keyboard when the screen its touched.
