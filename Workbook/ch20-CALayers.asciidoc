Chapter 20 - CALayers
=====================

In this chapter we will use a Cocoa Touch Framework called Core Animation. This framework is has two main purposes: Composition and Animation, taking this as base we will look into the Composition part first.

Composition
-----------
Speaking in terms of Visual Arts, the term *Composition* is the placement or arrangement of visual elements to integrate a work of art. The Visual Artists (Most of them Graphical Designers) execute this technique in Photographs, Paints, or Designs.

Until this part of the course we just have seen an object used to draw something in the screen: The *UIView*. Speaking in terms of memory and performance the UIView is a heavyweight champion, what this means is that it takes a lot of resources to animate it or display multiple of them on the screen. (You can try it! Load more than 50 UIViews with different colors on any project).

Because of this if we want to create a complex composition we need a more light object, and it is called "CALayer". If the UIViews are a 1 Dollar in terms of memory and performance, the CALayer is 15 Cents.

So the next question will be, why we are still using UIViews? The correct answer is that the CALayers have less features like the support for gestures, easy custom drawing using Core Graphics (You can do it on the CALayer but is more complex to implement), auto resizing masks. Besides what you will see in terms of implementation in the following exercises.

Said this its a great time to start coding:


Initial Project
~~~~~~~~~~~~~~~

As we have seen through the course, the way to create a new Project is the following:

[source, sh]
------------
$ motion create Layers
------------

For us to use the Core Animation Framework first we need to add it to the app, open the *Rake File*:

[source, sh]
------------
$ cd Layers

$ open Rakefile
------------

To add a new framework to the app, you need to add the last line in the method:

[source, ruby]
--------------
Motion::Project::App.setup do |app|

  # Use `rake config' to see complete project settings.
  app.name = 'Layers'

  app.frameworks << "QuartzCore"
end
--------------


Next we need to add a View Controller where we will implement a CALayer, lets call it *Layer View Controller*:

[source, sh]
------------
$ cd app

$ mkdir controllers

$ cd controllers

$ touch layer_view_controller.rb

$ open layer_view_controller.rb
------------

Add the following code to our new file:

[source, ruby]
-----------------
class LayerViewController < UIViewController

  def loadView

    # Lets create a view for our view controller
    self.view = UIView.alloc.init
    self.view.backgroundColor = UIColor.colorWithRed(0.255, green:0.686, blue:0.988, alpha:1.0)

    # When we create a new instance of a CALayer, the designated initializer 
    # is the following one
    red_layer = CALayer.layer
    red_layer.backgroundColor = UIColor.redColor.CGColor

    # A difference from a UIView is that the CALayer uses the frame only
    # to determine its size, the position is set in the position property
    # this is required because the Layers has it position in the center of it
    # instead of top left corner, like the UIView.
    red_layer.frame = CGRectMake(0, 0, 100, 100)
    red_layer.position = CGPointMake(50, 50)

    # The view has a property called layer, every UIView has a layer inside
    # it. So we can add our layer as a sublayer of that one.
    self.view.layer.addSublayer(red_layer)
  end

end
------------------------

IMPORTANT: Please take a moment to understand the changes related to the coordinate system on the CALayer (Hint: Frame & Position)

Lets continue opening the Application Delegate and adding the following:

[source, sh]
------------
$ cd ..

$ cd ..

$ open app_delegate.rb
------------

[source, ruby]
--------------
def application(application, didFinishLaunchingWithOptions:launchOptions)
 
  #Create an instance of Layer View Controller
  layer_view_controller = LayerViewController.alloc.init

  @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)

  #Every window has a root view controller from which it will present its view
  @window.rootViewController = layer_view_controller
  @window.makeKeyAndVisible
  true
end
--------------

If we run the App you must see the following:

[source, sh]
------------
$ rake
------------

.Initial Run
image::resources/ch20-CALayers/ch20_REPL1.png[Initial Run]


Changing Layers
~~~~~~~~~~~~~~~
Lets use a little of REPL to illustrate some points, please look at your terminal at the same time with the simulator, and execute the following:

First select the blue view using CMD + click on it, later run this on your console:

[source, sh]
------------
(#<UIView:0x000000)> layer = self.layer.sublayers.objectAtIndex(0) 
=> #<CALayer:0x000000>
------------

IMPORTANT: Take note that you can not select Layers using the CMD + click

[source, sh]
------------
(#<UIView:0x000000)> layer.backgroundColor = UIColor.colorWithRed(0.957, green:0.824, blue:0.184, alpha:1.0).CGColor
------------

.Yellow Square
image::resources/ch20-CALayers/ch20_REPL2.png[Yellow Square]

[source, sh]
------------
(#<UIView:0x000000)> layer.position = CGPointMake(100, 100)
------------

.Yellow Square in a Different Position
image::resources/ch20-CALayers/ch20_REPL3.png[Yellow Square in a Different Position]

[source, sh]
------------
(#<UIView:0x000000)> layer.cornerRadius = 20
------------

.Yellow Square with Rounded Corners
image::resources/ch20-CALayers/ch20_REPL4.png[Yellow Square with Rounded Corners]

[source, sh]
------------
(#<UIView:0x000000)> layer.borderWidth = 10
(#<UIView:0x000000)> layer.borderColor = UIColor.colorWithRed(0.988, green:0.604, blue:0.153, alpha:1.0).CGColor
------------

.Yellow Square with Border
image::resources/ch20-CALayers/ch20_REPL5.png[Yellow Square with Border]

[source, sh]
------------
(#<UIView:0x000000)> layer.shadowRadius = 5.0
(#<UIView:0x000000)> layer.shadowColor = UIColor.blackColor.CGColor
(#<UIView:0x000000)> layer.shadowOpacity = 0.65
------------

.Yellow Square with Shadow
image::resources/ch20-CALayers/ch20_REPL6.png[Yellow Square with Shadow]

They are two things important in this part, the first is that you can manipulate the appearance in more ways using a CALayer than a UIView like the Rounded Corners, Shadows, etc. Also if you look closely you must see that when you change some properties of the layer it animates it self, we will look into more deeply later on.


Putting the things together
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that we have see the CALayers in action, is time to do somethings more complicated. Open your LayerViewController and add the following:

[source, sh]
------------
$ open layer_view_controller.rb
------------

[source, ruby]
--------------
def loadView

  # Lets create a view for our view controller
  self.view = UIView.alloc.initWithFrame(UIScreen.mainScreen.bounds)

  layout_background_layer()
end


def layout_background_layer

  # We need a new type of layer used to create Gradients
  background_layer = CAGradientLayer.layer
  background_layer.frame = self.view.bounds

  # Initialize the colors of the gradient, it can have any number of colors
  # in this case we will use only three
  top_background_color = UIColor.colorWithRed(0.131, green:0.387, blue:0.618, alpha:1.0).CGColor
  middle_background_color = UIColor.colorWithRed(0.255, green:0.686, blue:0.984, alpha:1.0).CGColor
  bottom_background_color = UIColor.colorWithRed(0.367, green:0.692, blue:1.0, alpha:1.0).CGColor

  # Set the colors in the layer using an array
  background_layer.colors = NSArray.arrayWithObjects(top_background_color,
                                                    middle_background_color,
                                                    bottom_background_color,
                                                    nil)

  # Set the colors locations into the array, this means where it will start painting
  # the color, if you look closely we are telling the layer to paint the top color in
  # 0.0 which is the top, the middle in 0.5 and 0.0 for the bottom color
  background_layer.locations = NSArray.arrayWithObjects(NSNumber.numberWithFloat(0.0),
                                                       NSNumber.numberWithFloat(0.5),
                                                       NSNumber.numberWithFloat(1.0),
                                                       nil)

  # We want this layer to be the background of our app    
  self.view.layer.insertSublayer(background_layer, atIndex:0)
end
--------------

.Background with Gradient
image::resources/ch20-CALayers/ch20_GradientBackground.png[Background with Gradient]

Easy right? We create a nice background for our app using a gradient. Lets continue adding some grass into the composition:

Please copy the **Determine deployment target** into our app resources folder, after that add the following method to our *LayerViewController* class

[source, ruby]
--------------
def loadView

  # Lets create a view for our view controller
  self.view = UIView.alloc.initWithFrame(UIScreen.mainScreen.bounds)

  layout_background_layer
  layout_grass_layer
end

def layout_grass_layer

  #Lets instance a new layer for containing our grass image
  grass_layer = CALayer.layer
  grass_layer.frame = self.view.bounds

  #Load the image into memory
  grassImage = UIImage.imageNamed("bgGrass.png")

  # Set the image as content of the layer
  grass_layer.contents = grassImage.CGImage

  self.view.layer.addSublayer(grass_layer)
end
--------------

.Grass Layer
image::resources/ch20-CALayers/ch20_GrassLayer.png[Grass Layer]

Great! Now you see that we are compositing two layers together and learn that you can also include an Image as a content. But how about drawing custom figures? Add the following to the *LayerViewController* class:


[source, ruby]
--------------
def loadView

  # Lets create a view for our view controller
  self.view = UIView.alloc.initWithFrame(UIScreen.mainScreen.bounds)

  layout_background_layer
  layout_sun_layer
  layout_grass_layer
end


def layout_sun_layer

  # Create a new type of layer, in this case CAShapeLayer
  @sun_layer = CAShapeLayer.layer
  @sun_layer.frame = CGRectMake(0, 0, 180, 180)
  @sun_layer.position = CGPointMake(90, 90)

  # Set some color for the figure fill and the stroke
  @sun_layer.fillColor = UIColor.colorWithRed(0.957, green:0.824, blue:0.184, alpha:1.0).CGColor
  @sun_layer.strokeColor = UIColor.colorWithRed(0.988, green:0.604, blue:0.153, alpha:1.0).CGColor

  # We need to set a line width of 10 for this particular figure
  @sun_layer.lineWidth = 10


  # The following part is the path that composes the figure
  # point by point into the layer
  sun_path = UIBezierPath.bezierPath

  sun_path.moveToPoint(CGPointMake(91.15, 48.53))
  sun_path.addLineToPoint(CGPointMake(91.15, 48.53))
  sun_path.addLineToPoint(CGPointMake(106.00, 41.88))
  sun_path.addLineToPoint(CGPointMake(114.90, 55.50))
  sun_path.addLineToPoint(CGPointMake(130.99, 57.94))
  sun_path.addLineToPoint(CGPointMake(131.11, 74.21))
  sun_path.addLineToPoint(CGPointMake(143.33, 84.95))
  sun_path.addLineToPoint(CGPointMake(134.63, 98.71))
  sun_path.addLineToPoint(CGPointMake(139.10, 114.35))
  sun_path.addLineToPoint(CGPointMake(124.35, 121.22))
  sun_path.addLineToPoint(CGPointMake(119.65, 136.80))
  sun_path.addLineToPoint(CGPointMake(103.53, 134.60))
  sun_path.addLineToPoint(CGPointMake(91.15, 145.17))
  sun_path.addLineToPoint(CGPointMake(78.78, 134.60))
  sun_path.addLineToPoint(CGPointMake(62.66, 136.80))
  sun_path.addLineToPoint(CGPointMake(57.96, 121.22))
  sun_path.addLineToPoint(CGPointMake(43.21, 114.35))
  sun_path.addLineToPoint(CGPointMake(47.68, 98.71))
  sun_path.addLineToPoint(CGPointMake(38.98, 84.95))
  sun_path.addLineToPoint(CGPointMake(51.20, 74.21))
  sun_path.addLineToPoint(CGPointMake(51.32, 57.94))
  sun_path.addLineToPoint(CGPointMake(67.41, 55.50))
  sun_path.addLineToPoint(CGPointMake(76.31, 41.88))

  sun_path.closePath

  # Set the path into the layer
  @sun_layer.path = sun_path.CGPath;

  self.view.layer.addSublayer(@sun_layer)
end
--------------

.Sun Layer
image::resources/ch20-CALayers/ch20_SunLayer.png[Sun Layer]


Implicit Animations
~~~~~~~~~~~~~~~~~~~
When you change some properties of a CALayer at run time, what happens is that the properties are modified in an animated way. This properties that trigger animations are called *Animatable Properties*, and some of them are the following:

* anchorPoint
* backgroundColor
* borderColor
* borderWidth
* bounds
* cornerRadius
* mask
* opacity
* position
* shadowColor
* shadowOffset
* shadowOpacity
* shadowRadius

For this to happen a process works inside of Core Animation called *Interpolation*, the best way to explain it is using a example:

Lets say that you implemented a layer, but its needed when the user touches the screen to disappear the layer. Do this is pretty straight forward, just set the opacity property to 0.0. Inside Core Animation the next will happen:

. Because we are using a implicit animation, the default time for the whole animation is 0.3

. Core Animation calculates the value at every millisecond that takes to execute the animation. Starting at second 0 with 1.0, 0.1 with 0.65, 0.2 with 0.45, 0.3 with 0.0. This process of determining the values of a property (or properties) at every given time of the animation is called *Interpolation*

. Then the resulting matrix property values and times is executed, giving the effect that the layer is being animated.

If you think it its similar that the old cartoon animation process. Having the mouse drawn frame by frame and flipping them it quickly does the same trick.

Enough of theory, lets do this in a practical way. Insert the following to the *LayerViewController* class:

[source, ruby]
--------------
def loadView

  # Lets create a view for our view controller
  self.view = UIView.alloc.initWithFrame(UIScreen.mainScreen.bounds)

  layout_background_layer
  layout_sun_layer
  layout_grass_layer

  # Instantiate a gesture recognizer to handle the user touch
  tap_gesture_recognizer = UITapGestureRecognizer.alloc.initWithTarget(self,
                                                                       action:'view_tap:')

  self.view.addGestureRecognizer(tap_gesture_recognizer)
end


def view_tap(tap_gesture_recognizer)

  #Get the position of the touch according to the view
  tap_point_in_view = tap_gesture_recognizer.locationInView(self.view)

  #Apply the position to our Sun Layer
  @sun_layer.position = tap_point_in_view

end
--------------

Now when you touch the screen the sun layer will animate to that particular position. Try another appearance changes or look again in the REPL part of the exercise.

.Animated Layer
image::resources/ch20-CALayers/ch20_AnimatedLayer.png[Sun Layer]

Challenges
~~~~~~~~~~
. At the same time the sun layer is moving to a new position, rotate it like it was spinning. (HINT: CGTransformationMatrix)

. Change the background of the application when the sun layer is on top, and on bottom. Like if it was sunrise, dawn and night


