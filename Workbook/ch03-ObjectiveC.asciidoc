Chapter 03 - Objective C and Chapter 04 - C
===========================================

Estimator App
-------------
In this exercise we will create an iOS app that exemplify the way many companies in the world estimate their projects, the "Estimator"

Create Project
~~~~~~~~~~~~~~

As a first step we will need to create a project, open your terminal application and run the following command:

[source,sh]
-------------
$ motion create estimator
-------------

If we look at the new folder "Estimator", we will find a couple of new folders: "app", "resources", "spec". 

Next, lets copy our application images from *(define deploy route)* into the resources folder


First Run
~~~~~~~~~

Just to make sure that everything is fine, we can test our new created project by executing the following line

[source,sh]
-------------
$ cd estimator

$ rake
--------------

This command will compile the project and run it on the simulator, like the following image:

.First Run
image::resources/ch03-ObjectiveC/FirstRun.png[First Run]


Project View Controller
~~~~~~~~~~~~~~~~~~~~~~~

Let's start coding our project, first we need to create a new file that will contain our Project View Controller Class

[source,sh]
-------------
$ cd app

$ mkdir controllers

$ cd controllers

$ touch project_view_controller.rb
--------------

Let's open it, and add the following lines:

[source,sh]
-------------
$ open project_view_controller.rb
--------------

[source,ruby]
----
class ProjectViewController < UIViewController

  private

  def loadView

    self.view = UIView.alloc.init
    self.view.backgroundColor = UIColor.redColor

  end

end
----


Next we need to open the "AppDelegate" of the app, and load our controller into the UIWindow. This is done by inserting the following:

[source, sh]
-------
$ cd ..

$ open app_delegate.rb
-------

[source, ruby]
---------
def application(application, didFinishLaunchingWithOptions:launchOptions)

  #Create an instance of Project View Controller
  project_view_controller = ProjectViewController.alloc.init

  @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)

  #Every window has a root view controller from which it will present its view
  @window.rootViewController = project_view_controller
  @window.makeKeyAndVisible

  true
end
---------

This part will load a new instance of our Project View Controller and insert its view into the UIWindow. Please note that the UIWindow receives a controller as rootViewController, instead of a view.

If we run the project it should look like the following image:

[source, sh]
------
$ rake
------

.Project View Controller
image::resources/ch03-ObjectiveC/ProjectViewController.png[Project View Controller]


Project View
~~~~~~~~~~~~~~

Next we need to add some controls for the user to select the number of screens of the project, complexity, methodology, etc. For this is required to add the following method to the project_view_controller.rb file:

[source, ruby]
------------
def layout_view
	 
  # Initialize a new view for the controller
  self.view = UIView.alloc.init
  self.view.backgroundColor = UIColor.colorWithRed(0.902, green: 0.902, blue: 0.902, alpha: 1.0)

  # The following is an initialization and add of controls into the view


  # First create an instance of UIImageView, this control will present an Image into the view
  # for this case a black header
  @header_image_view = UIImageView.alloc.initWithFrame(CGRectMake(0, 0, 320, 60))
  @header_image_view.image = UIImage.imageNamed("bgHeader.png")

  self.view.addSubview(@header_image_view)


  # Next we create an instance of UILabel, tellling it the position on the screen that
  # we want it to be drawn. For this we use a c struct called CGFrame
  @title_label = UILabel.alloc.initWithFrame(CGRectMake(0, 0, 320, 50))
  @title_label.text = "Project Estimator"
  @title_label.color = UIColor.colorWithRed(0.702, green: 0.702, blue: 0.702, alpha: 1.000)
  @title_label.backgroundColor = UIColor.clearColor
  @title_label.textAlignment = UITextAlignmentCenter

  # To specify a custom Font we need to tell the proper name of it and the size that we want
  @title_label.font = UIFont.fontWithName("AvenirNext-Bold", size: 25)

  # Then we add it to the view like this way
  self.view.addSubview(@title_label)


  @number_of_screens_text_field = UITextField.alloc.initWithFrame(CGRectMake(10, 75, 300, 45))
  @number_of_screens_text_field.borderStyle = UITextBorderStyleRoundedRect
  @number_of_screens_text_field.delegate = self
  @number_of_screens_text_field.keyboardType = UIKeyboardTypeNumbersAndPunctuation
  @number_of_screens_text_field.text = ""
  @number_of_screens_text_field.background = UIImage.imageNamed("bgTextField.png")
  @number_of_screens_text_field.borderStyle = UITextBorderStyleNone
  @number_of_screens_text_field.placeholder = "Number of Screens"
  @number_of_screens_text_field.textColor = UIColor.colorWithRed(0.451, green:0.451, blue:0.451, alpha:1.0)
  @number_of_screens_text_field.textAlignment = UITextAlignmentCenter
  @number_of_screens_text_field.font = UIFont.fontWithName("AvenirNextCondensed-DemiBold", size:25)
  @number_of_screens_text_field.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter

  self.view.addSubview(@number_of_screens_text_field)


  @complexity_label = UILabel.alloc.initWithFrame(CGRectMake(10, 140, 300, 30))
  @complexity_label.text = "Complexity"
  @complexity_label.color = UIColor.colorWithRed(0.400, green: 0.400, blue: 0.400, alpha: 1.0)
  @complexity_label.backgroundColor = UIColor.clearColor
  @complexity_label.font = UIFont.fontWithName("AvenirNext-DemiBold", size: 20)
  @complexity_label.textAlignment = UITextAlignmentCenter

  self.view.addSubview(@complexity_label)


  # For the UISegmentedControl to work, we need to pass him the possible values
  # in this case a NSArray do the trick
  @complexity_values = NSMutableArray.alloc.init
  @complexity_values.addObject("Low")
  @complexity_values.addObject("High")

  # We create an instance of a UISegmentedControl, setting the allowed values for it
  @complexity_segmented_control = UISegmentedControl.alloc.initWithItems(@complexity_values)
  @complexity_segmented_control.frame = CGRectMake(10, 170, 300, 30)


  # Its not required to set a selected index, but for this example we select the first segment
  @complexity_segmented_control.selectedSegmentIndex = 0

  self.view.addSubview(@complexity_segmented_control)


  @outsourced_label = UILabel.alloc.initWithFrame(CGRectMake(10, 210, 300, 30))
  @outsourced_label.text = "Outsourced"
  @outsourced_label.color = UIColor.colorWithRed(0.400, green: 0.400, blue: 0.400, alpha: 1.0)
  @outsourced_label.backgroundColor = UIColor.clearColor
  @outsourced_label.font = UIFont.fontWithName("AvenirNext-DemiBold", size: 20)
  @outsourced_label.textAlignment = UITextAlignmentCenter

  self.view.addSubview(@outsourced_label)


  @outsourced_values = NSMutableArray.alloc.init
  @outsourced_values.addObject("No")
  @outsourced_values.addObject("Yes")

  @outsourced_segmented_control = UISegmentedControl.alloc.initWithItems(@outsourced_values)
  @outsourced_segmented_control.frame = CGRectMake(10, 240, 300, 30)
  @outsourced_segmented_control.selectedSegmentIndex = 0

  self.view.addSubview(@outsourced_segmented_control)


  @methodology_label = UILabel.alloc.initWithFrame(CGRectMake(10, 290, 300, 30))
  @methodology_label.text = "Methodology"
  @methodology_label.color = UIColor.colorWithRed(0.400, green: 0.400, blue: 0.400, alpha: 1.0)
  @methodology_label.backgroundColor = UIColor.clearColor
  @methodology_label.font = UIFont.fontWithName("AvenirNext-DemiBold", size: 20)
  @methodology_label.textAlignment = UITextAlignmentCenter

  self.view.addSubview(@methodology_label)


  @methodology_values = NSMutableArray.alloc.init
  @methodology_values.addObject("Waterfall")
  @methodology_values.addObject("Agile")

  @methodology_segmented_control = UISegmentedControl.alloc.initWithItems(@methodology_values)
  @methodology_segmented_control.frame = CGRectMake(10, 320, 300, 30)
  @methodology_segmented_control.selectedSegmentIndex = 0

  self.view.addSubview(@methodology_segmented_control)
   	 
end
-----------

Also for this to work, we need to change the loadView method to look as the following:

["source","ruby", args="-O \"hl_lines=3\""]
------
def loadView

  layout_view

end
-----

Let's run the application:

[source, sh]
-----------
$ rake
-----------

.Project View
image::resources/ch03-ObjectiveC/ProjectView.png[Project View]


The segmented controls does not look that pretty right?, lets customize their apperance adding the following method to the project_view_controller.rb file:

[source, ruby]
--------------

# Method to customize the appearance of the UISegmentedControl
def customize_segmented_control

  # Lets load the images from their respective files
  segmented_control_normal_background = UIImage.imageNamed("bgSegmentedControlNormal.png")
  segmented_control_selected_background = UIImage.imageNamed("bgSegmentedControlSelected.png")
  segmented_control_separator = UIImage.imageNamed("bgSegmentedControlSeparator.png")


  # Apply the image for the background when the segment is not selected
  UISegmentedControl.appearance.setBackgroundImage(segmented_control_normal_background,
                                                   forState:UIControlStateNormal,
                                                   barMetrics: UIBarMetricsDefault)

  # Apply the image for the background when the segment is selected
  UISegmentedControl.appearance.setBackgroundImage(segmented_control_selected_background,
                                                   forState:UIControlStateSelected,
                                                   barMetrics: UIBarMetricsDefault)


  # Apply the image for the divider of the control
  UISegmentedControl.appearance.setDividerImage(segmented_control_separator,
                                                forLeftSegmentState: UIControlStateNormal,
                                                rightSegmentState:UIControlStateSelected,
                                                barMetrics:UIBarMetricsDefault)



  # Also we need to change the font of the titles, the first step is to load the font into the memory
  segmented_control_title_font = UIFont.fontWithName("AvenirNextCondensed-Bold", size:20)


  # To apply certain visual attributes to Apple's default controls, we need to use a iOS 5 technology
  # called Skins. To work with screens we must create a dictionary with the key of the property we want
  # to change and the proper value
  normal_title_text_attributes = NSMutableDictionary.alloc.init
  normal_title_text_attributes.setValue(segmented_control_title_font, forKey:UITextAttributeFont)

  normal_title_text_color = UIColor.colorWithRed(0.545, green:0.749, blue:0.349, alpha:1.0)
  normal_title_text_attributes.setValue(normal_title_text_color, forKey: UITextAttributeTextColor)

  normal_title_text_attributes.setValue(UIColor.clearColor, forKey: UITextAttributeTextShadowColor)

  # Using Skins you can change the visual properties of all the same kind of controls at the same time,
  # no matter if they were created on another class or in another excecution time. To archive this
  # only send the messages to the class
  #
  # On the other side if you want only to modify one particular control, the following like will work
  # on the instance instead of the class
  UISegmentedControl.appearance.setTitleTextAttributes(normal_title_text_attributes, forState:UIControlStateNormal)



  selected_title_text_attributes = NSMutableDictionary.alloc.init
  selected_title_text_attributes.setValue(segmented_control_title_font, forKey:UITextAttributeFont)

  selected_title_text_color = UIColor.colorWithRed(0.200, green:0.200, blue:0.200, alpha:1.0)
  selected_title_text_attributes.setValue(selected_title_text_color, forKey:UITextAttributeTextColor)

  UISegmentedControl.appearance.setTitleTextAttributes(selected_title_text_attributes, forState:UIControlStateSelected)

end

-------------- 

And also we will need to change our loadView method again, lo look like this:

["source","ruby", args="-O \"hl_lines=3\""]
--------------

def loadView

  customize_segmented_control
  layout_view

end

--------------

This time, if we run the application you should see the following in your simulator:

.Project View with Custom Segmented Controls
image::resources/ch03-ObjectiveC/ProjectViewWithCustomSegmentedControls.png[Project View with Custom Segmented Controls]


Project Model
~~~~~~~~~~~~~

First create a JSON file to contain all the estimated historical data (Fake one ;):

[source, sh]
------------
$ cd..

$ cd resources

$ touch historical_data.json
------------

Then add the following line to the file:

[source, sh]
------------
$ open historical_data.json
------------

[source, json]
---------------
{
  "Complexity": 
  {
    "Low":
    {
      "TotalEffort": 80,
      "Variation": 5
    },

    "High":
    {
      "TotalEffort": 400,
      "Variation": 20
    }
  },

  "Outsourced":
  {
    "No":
    {
      "TotalEffort": 80,
      "Variation": 5
    },

    "Yes":
    {
      "TotalEffort": 400,
      "Variation": 7
    }
  },

  "Methodology":
  {
    "Waterfall":
    {
      "TotalEffort": 400,
      "Variation": 15
    },

    "Agile":
    {
      "TotalEffort": 80,
      "Variation": 3
    }
  }
}
---------------

Now we need a object that make the estimation calculus, this object will be called "Project", let's create the file that will contain it:

[source, sh]
---------
$ cd ..

$ mkdir models

$ cd models

$ touch project.rb
---------

Add the next lines to it:

[source, ruby]
-----------

class Project

  #Constants representing Keys in the JSON
  COMPLEXITY_DATA_KEY = 'Complexity'
  OUTSOURCED_DATA_KEY = 'Outsourced'
  METHODOLOGY_DATA_KEY = 'Methodology'
  TOTAL_EFFORT_DATA_KEY = 'TotalEffort'
  VARIATION_DATA_KEY = 'Variation'

  attr_accessor :number_of_screens
  attr_accessor :complexity
  attr_accessor :outsourced
  attr_accessor :methodology

  attr_reader :total_effort
  attr_reader :variation
  attr_reader :delivery_year

end

----------

Great!, Now we need to add the logic to read our JSON File, insert the following method in the class:

[source, ruby]
--------------
def load_historical_estimates

  # Get the path of our JSON File inside the bundle
  historical_data_file  = NSBundle.mainBundle.pathForResource('historical_data', ofType:'json')

  # For us to load the file, we need to pass a pointer. So if something goes wrong we can print
  # the error
  error_pointer = Pointer.new(:object)

  # Lets load the file into a NSData
  historical_data = NSData.alloc.initWithContentsOfFile(historical_data_file,	                                      				options:NSDataReadingUncached,
                                         	error:error_pointer)

  unless historical_data
 
    if error_pointer[0].code == NSFileReadNoSuchFileError

      $stderr.puts "Error: Missing File Error"

    else

      $stderr.puts "Error: #{error_pointer[0].description}"

    end

    return nil

  end


  # Serialize the NSData into something we can work with, in this case a Hash
  historical_estimates = NSJSONSerialization.JSONObjectWithData(historical_data,
                                                                  options: NSDataReadingUncached,
                                                                  error: error_pointer)

  unless historical_estimates

    $stderr.puts "Error: #{error_pointer[0].description}"

    return nil
  end


  historical_estimates
end
-------------


Now we have read our JSON file, the next thing is to extract the historical data into something we can use to make the calculus. This following methods should be added to the class:


[source, ruby]
--------
def obtain_historical_complexity

  @complexity_total_effort = nil
  @complexity_variation = nil

  historical_complexity = @historical_estimates[COMPLEXITY_DATA_KEY]

  # We use the user selection as a Key
  unless historical_complexity[@complexity].nil?

    selected_historical_complexity = historical_complexity[@complexity]

    @complexity_total_effort = selected_historical_complexity[TOTAL_EFFORT_DATA_KEY]
    @complexity_variation = selected_historical_complexity[VARIATION_DATA_KEY]
  end
end


def obtain_historical_outsourced
	 
  @outsourced_total_effort = nil
  @outsourced_variation = nil

  historical_outsourced = @historical_estimates[OUTSOURCED_DATA_KEY]

  # We use the user selection as a Key
  unless historical_outsourced[@outsourced].nil?

    selected_historical_outsourced = historical_outsourced[@outsourced]

    @outsourced_total_effort = selected_historical_outsourced[TOTAL_EFFORT_DATA_KEY]
    @outsourced_variation = selected_historical_outsourced[VARIATION_DATA_KEY]
  end	
end


def obtain_historical_methodology

  @methodology_total_effort = nil
  @methodology_variation = nil

  historical_methodology = @historical_estimates[METHODOLOGY_DATA_KEY]

  # We use the user selection as a Key
  unless historical_methodology[@methodology].nil?

    selected_historical_methodology = historical_methodology[@methodology]

    @methodology_total_effort = selected_historical_methodology[TOTAL_EFFORT_DATA_KEY]
    @methodology_variation = selected_historical_methodology[VARIATION_DATA_KEY]
  end
end
----------

Almost there! Lets add the algorithm to make the calculus, inserting the following methods:

[source, ruby]
-----------
def calculate_total_effort

  # We add all the possible total effort that the user selected
  total_effort_data = @complexity_total_effort + @outsourced_total_effort + @methodology_total_effort

  # Generate a random with the minimum value of a half of the total effort
  total_effort = rand(total_effort_data / 2) + (total_effort_data / 2)

  # Calculate the effort plus the number of screens as percentage
  total_effort * ((@number_of_screens / 100) + 1)
end


def calculate_variation

  # We add all the possible variation that the user selected
  variation_data = @complexity_variation + @outsourced_variation + @methodology_variation

  rand(variation_data / 2) + (variation_data / 2)
end


def calculate_delivery_year

  # Calculate the total effort plus the posible variation
  total_effort_with_variation = @total_effort * (@variation / 100)

  # Transform the hours into working weeks
  total_effort_days = total_effort_with_variation / 8
  total_effort_weeks = total_effort_days / 5


  # In the following part we add the calculated weeks to the current date
  weekComponent = NSDateComponents.alloc.init
  weekComponent.week = total_effort_weeks

  calendar = NSCalendar.currentCalendar

  delivery_date = calendar.dateByAddingComponents(weekComponent,
                                                     toDate: NSDate.date,
                                                     options: 0)


  # Of the resulting date we only need the year, in the following section is extracted
  yearComponent = calendar.components(NSYearCalendarUnit, fromDate: delivery_date)

  yearComponent.year
end
-----------

Last part! A method that will execute the calculus, this method will be called by the Project View Controller:

[source, ruby]
------------
def estimate 

  @historical_estimates = load_historical_estimates


  obtain_historical_complexity
  obtain_historical_outsourced
  obtain_historical_methodology


  @total_effort =  calculate_total_effort
  @variation = calculate_variation
  @delivery_year = calculate_delivery_year

end
------------

Project View Controller and Project Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We need to add a button to execute the estimation process, insert this lines on the button of the __layout_view__ method, in the project_view_controller.rb file:

[source, sh]
--------------
$ cd ..

$ cd controllers

$ open project_view_controller.rb
--------------

[source, ruby]
--------------
 # This control initialization is radically different from the other ones, this is because
# UIButton provides different types and styles of buttons. The default one is Rounded Rect
@estimate_button = UIButton.buttonWithType(UIButtonTypeRoundedRect)
@estimate_button.frame = CGRectMake(10, 400, 300, 40)

# Sometimes when we work with controls we can change the title or image based on different states of
# it. (Normal, Selected, Highlighted)
@estimate_button.setBackgroundImage(UIImage.imageNamed("btnEstimate.png"), forState:UIControlStateNormal)
#@estimate_button.setTitle("Estimate this project", forState: UIControlStateNormal)

# Lets tell the button who is going to call and where, when the user touch it
@estimate_button.addTarget(self,
                           action: "estimate_project:",
                           forControlEvents: UIControlEventTouchUpInside)

self.view.addSubview(@estimate_button)
--------------

IMPORTANT: The method is called estimate_project:, with the two dots

Please pay special attention to the __addTarget__ method, this is used to tell the button who and in which method it should call when the user touches it. In this case we are telling it to call the Project View Controller in the method "estimate_project:", lets add the following:

[source, ruby]
--------------
def estimate_project(sender)

  # Create a new instance of Project
  project = Project.new

  project.number_of_screens = @number_of_screens_text_field.text.intValue


  # We need the selected index to extract the string value from the segmented allowed
  # values array
  selected_complexity_index = @complexity_segmented_control.selectedSegmentIndex
  project.complexity = @complexity_values.objectAtIndex(selected_complexity_index)


  selected_outsourced_index = @outsourced_segmented_control.selectedSegmentIndex
  project.outsourced = @outsourced_values.objectAtIndex(selected_outsourced_index)


  selected_methodology_index = @methodology_segmented_control.selectedSegmentIndex
  project.methodology = @methodology_values.objectAtIndex(selected_methodology_index)


  project.estimate
	
end
------------

In this method we implement the creation of a new Project instance, setting the user input and finally we ask it to calculate the estimation


Estimation View Controller
~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we need to add some place to show our calculated values, for this we need to create a new view controller called "Estimation View Controller":

[source, sh]
-------------
$ touch estimation_view_controller.rb
-------------

Add the following lines to the "estimation_view_controller.rb":

[source, ruby]
--------------
class EstimationViewController < UIViewController

  def loadView

    layout_view

  end

  def layout_view

    self.view = UIView.alloc.init
    self.view.backgroundColor = UIColor.colorWithRed(0.298, green: 0.298, blue: 0.298, alpha: 1.0)

    @header_image_view = UIImageView.alloc.initWithFrame(CGRectMake(0, 0, 320, 60))
    @header_image_view.image = UIImage.imageNamed("bgHeader.png")

    self.view.addSubview(@header_image_view)


    @title_label = UILabel.alloc.initWithFrame(CGRectMake(0, 0, 320, 50))
    @title_label.text = "Estimation"
    @title_label.color = UIColor.colorWithRed(0.702, green: 0.702, blue: 0.702, alpha: 1.000)
    @title_label.backgroundColor = UIColor.clearColor
    @title_label.textAlignment = UITextAlignmentCenter
    @title_label.font = UIFont.fontWithName("AvenirNext-Bold", size: 25)

    self.view.addSubview(@title_label)


    @total_effort_title_label = UILabel.alloc.initWithFrame(CGRectMake(20, 60, 280, 30))
    @total_effort_title_label.text = "Total effort"
    @total_effort_title_label.color = UIColor.colorWithRed(0.702, green: 0.702, blue: 0.702, alpha: 1.000)
    @total_effort_title_label.backgroundColor = UIColor.clearColor
    @total_effort_title_label.font = UIFont.fontWithName("AvenirNextCondensed-DemiBold", size: 35)

    self.view.addSubview(@total_effort_title_label)


    @total_effort_value_label = UILabel.alloc.initWithFrame(CGRectMake(50, 50, 220, 180))
    @total_effort_value_label.color = UIColor.whiteColor
    @total_effort_value_label.backgroundColor = UIColor.clearColor
    @total_effort_value_label.textAlignment = UITextAlignmentCenter
    @total_effort_value_label.font = UIFont.fontWithName("AvenirNextCondensed-Bold", size: 120)
    @total_effort_value_label.minimumFontSize = 50
    @total_effort_value_label.adjustsFontSizeToFitWidth = true

    self.view.addSubview(@total_effort_value_label)


    @total_effort_unit_label = UILabel.alloc.initWithFrame(CGRectMake(200, 160, 130, 70))
    @total_effort_unit_label.text = "HRS"
    @total_effort_unit_label.color = UIColor.colorWithRed(0.671, green: 1.000, blue: 0.353, alpha: 1.000)
    @total_effort_unit_label.backgroundColor = UIColor.clearColor
    @total_effort_unit_label.font = UIFont.fontWithName("AvenirNextCondensed-Bold", size: 72)

    self.view.addSubview(@total_effort_unit_label)


    @variation_title_label = UILabel.alloc.initWithFrame(CGRectMake(20, 250, 280, 30))
    @variation_title_label.text = "Variation"
    @variation_title_label.color = UIColor.colorWithRed(0.702, green: 0.702, blue: 0.702, alpha: 1.000)
    @variation_title_label.backgroundColor = UIColor.clearColor
    @variation_title_label.font = UIFont.fontWithName("AvenirNextCondensed-Bold", size: 30)

    self.view.addSubview(@variation_title_label)


    @variation_value_label = UILabel.alloc.initWithFrame(CGRectMake(50, 265, 220, 85))
    @variation_value_label.text = "52"
    @variation_value_label.color = UIColor.whiteColor
    @variation_value_label.backgroundColor = UIColor.clearColor
    @variation_value_label.textAlignment = UITextAlignmentCenter
    @variation_value_label.font = UIFont.fontWithName("AvenirNextCondensed-Bold", size: 80)

    self.view.addSubview(@variation_value_label)


    @variation_unit_label = UILabel.alloc.initWithFrame(CGRectMake(190, 310, 120, 50))
    @variation_unit_label.text = "%"
    @variation_unit_label.color = UIColor.colorWithRed(0.671, green: 1.000, blue: 0.353, alpha: 1.000)
    @variation_unit_label.backgroundColor = UIColor.clearColor
    @variation_unit_label.font = UIFont.fontWithName("AvenirNextCondensed-Bold", size: 50)

    self.view.addSubview(@variation_unit_label)


    @delivery_year_title_label = UILabel.alloc.initWithFrame(CGRectMake(20, 370, 280, 40))
    @delivery_year_title_label.text = "Delivery year"
    @delivery_year_title_label.color = UIColor.colorWithRed(0.702, green: 0.702, blue: 0.702, alpha: 1.000)
    @delivery_year_title_label.backgroundColor = UIColor.clearColor
    @delivery_year_title_label.font = UIFont.fontWithName("AvenirNextCondensed-Bold", size: 30)

    self.view.addSubview(@delivery_year_title_label)


    @delivery_year_value_label = UILabel.alloc.initWithFrame(CGRectMake(150, 400, 150, 50))
    @delivery_year_value_label.text = "2040"
    @delivery_year_value_label.color = UIColor.whiteColor
    @delivery_year_value_label.backgroundColor = UIColor.clearColor
    @delivery_year_value_label.textAlignment = UITextAlignmentRight
    @delivery_year_value_label.font = UIFont.fontWithName("AvenirNextCondensed-Bold", size: 50)

    self.view.addSubview(@delivery_year_value_label)
  end
end
----------


We just implement the logic for our new view controller, also we add some labels to draw on the screen the values generated by the Project estimation


Estimation View Controller and Project Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The last part of our implementation is to add a way to bind the values of the Project Model into our labels, the following method does the trick (Insert it on the estimation_view_controller.rb):

[source, ruby]
---------------------

# Method to bind the values in the Project Object into proper UILabels
def bind_project(project)

  #Using an NSString we set the text into the label, when we are using %@ we tell the object
  #to print it description as a string
  @total_effort_value_label.text = NSString.stringWithFormat("%@", project.total_effort) 
  
  @variation_value_label.text = NSString.stringWithFormat("%@", project.variation)

  @delivery_year_value_label.text = NSString.stringWithFormat("%@", project.delivery_year)
end

---------------

IMPORTANT: Please take note that in this specific case we are using Objective-C strings (NSStrings) instead of ruby strings

Project View Controller and Estimation View Controller
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Final task! We need to show our new controller, the way to do this is to perform a transition from the Project View Controller to the Estimation View Controller

Insert the following lines into the estimate_project(sender) method on the class project_view_controller.rb:

[source, ruby]
---------------
# Now we need a new instance of the Estimation View Controller for show the
# results of the Project estimation
@estimation_view_controller = EstimationViewController.alloc.init

@estimation_view_controller.view.frame = self.view.frame

# Lets tell it to bind our project instance
@estimation_view_controller.bind_project(project)


# To show the Estimation View Controller view, we can use a transition.
# From our current view, to the Estimation View Controller's view
UIView.transitionFromView(self.view,
                          toView: @estimation_view_controller.view,
                          duration: 0.3,
                          options: UIViewAnimationOptionTransitionFlipFromLeft,
                          completion: nil)
---------------------

Run and Enjoy
~~~~~~~~~~~~~

Lets run our estimator app!

[source, sh]
------
$ rake
------

.Finished Project View Controller
image::resources/ch03-ObjectiveC/FinishedProjectViewController.png[Finished Project View Controller]
 
.Finished Estimation View Controller
image::resources/ch03-ObjectiveC/FinishedEstimationViewController.png[Finished Estimation View Controller]


Challenges
~~~~~~~~~~

1.- The UISegmentedControlls in the project_view_controller.rb are bound to a static array, move that logic to the Project Model. So it can provide the allowed values for the estimation.

2.- Now that the allowed values are in the Project Model, lets make it dynamic by retrieving them from the JSON File.
