Chapter 18 - Application Sandbox and Memory Warnings
====================================================


File System Structure
---------------------

We are going to learn in this chapter how to save our photos to disk, and when the application finish for any reason, the photos remains, have done say that which is the perfect place for store our files? Well we have more than one option, but for now we are going to use the application sandbox.



[NOTE]
Please add the assets to the resources folder of your project. You can find them under the resources folder and inside there is a folder images with the assets necessary for the chapter.  

[NOTE]
Bring files from chapter 17 'Camera'.  

Application Sandbox
-------------------    

An application sandbox its a directory enclosed and protected so no one ca access to it but the application itself. Inside of it we have the following directories:

application bundle
~~~~~~~~~~~~~~~~~~

This directory contains all the resources and the executable file and its read only

Library/Preferences/
~~~~~~~~~~~~~~~~~~~~

We have a directory in which store the preferences are saved, this directory is managed by the class *NSUserDefaults* and its backed up when the device synchronizes with iTunes or iCloud

tmp/
~~~~

You have a directory where you can can store temporal data during run time and you are responsible for erase it when you are done with it, also the operating system may purge data when the application its not running. An important think to remember its that this information its not backed up, you get access to this directory using, the function *NSTemporaryDirectory*. 


Documents/
~~~~~~~~~~

In this directory you can save store data that your application generates during run time and want to persist. This information its synchronized with iTunes or iCloud.

Library/Caches/
~~~~~~~~~~~~~~~

In essence it has the same functionality as documents directory, but its *NOT* synchronized or backed up, also this data can be deleted when the operating system requires the space, so you should have a mechanism to regenerate this info.



Photo Model
-----------

We are going to create an object 'photo' that takes the responsibility of code and decode the attributes of the photo, bring back the files from the previous chapter and add the the file named *photo.rb* to the app folder

[source, ruby]
----------------------------------------------------------------
class Photo 

  attr_accessor :photoName
  attr_accessor :photoImage

  def encodeWithCoder(encoder)

    encoder.encodeObject(@photoName,forKey:"photoName")
    encoder.encodeObject(@photoImage,forKey:"photoImage")
  end


  def initWithCoder(decoder)

    @photoName = decoder.decodeObjectForKey("photoName")
    @photoImage = decoder.decodeObjectForKey("photoImage")
  end

end
----------------------------------------------------------------

You may wondering why do we need to 'code' the attributes of the object, well its because we are going store the object in a binary format, in the documents directory.

Once we set up our photo object, we are going to create another object that saves and retrieves photos from the library, now create a file named *photo_library.rb* and add the following code

[source, ruby]
----------------------------------------------------------------
class PhotoLibrary

  attr_accessor :photos


  def photosArchivePath

    documentDirectories = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, true)
    #Get one and only document directory from that list
    documentDirectory = documentDirectories.objectAtIndex(0)
    documentDirectory.stringByAppendingPathComponent("photos.archive")  
  end


  def saveChanges (photo)

    allPhotos = storedPhotos
    allPhotos.addObject(photo)
    @photos = allPhotos
    NSKeyedArchiver.archiveRootObject(@photos , toFile:photosArchivePath) 
  end


  def storedPhotos

    finalArray = NSKeyedUnarchiver.unarchiveObjectWithFile(photosArchivePath)
    
    if !finalArray
    
      finalArray = NSMutableArray.alloc.init
    end

    finalArray
  end
end
----------------------------------------------------------------

Now we should save photo once it have been taken, open the album_camera_view_controller.rb and add the following methods 

[source, ruby]
----------------------------------------------------------------
def savePhoto(sender)

  puts "saving"

  library = PhotoLibrary.alloc.init

  photoObject = Photo.alloc.init
  photoObject.photoName = "name"
  photoObject.photoImage = @imageView.image

  library.saveChanges(photoObject)
end


def setSaveButton

  @savebuttonWithImage = saveButtonItem
  @savebuttonWithImage.addTarget(self, action: :'savePhoto:',forControlEvents:UIControlEventTouchUpInside)
  barButton = UIBarButtonItem.alloc.initWithCustomView(@savebuttonWithImage)
  
  self.navigationItem.rightBarButtonItem = barButton 
end
----------------------------------------------------------------

Dont forget to call this method on your *viewDidLoad* method

----------------------------------------------------------------
def viewDidLoad
  super()
  self.view.backgroundColor = UIColor.colorWithPatternImage(UIImage.imageNamed("bgTile"))
  setSaveButton
end
----------------------------------------------------------------

The 'menuButtonItem' should be created somewhere in this case in the *album_utilities.rb* so open the file and add the following method

[source, ruby]
----------------------------------------------------------------
def saveButtonItem

  buttonWithImage = UIButton.buttonWithType UIButtonTypeCustom
  buttonWithImage.setFrame CGRectMake(0.0, 0.0, 40.0, 35.0)
  buttonWithImage.setImage UIImage.imageNamed("sendEnabled"), forState:UIControlStateSelected
  buttonWithImage.setImage UIImage.imageNamed("sendEnabled"), forState:UIControlStateHighlighted
  buttonWithImage.setImage UIImage.imageNamed("sendDisabled"), forState:UIControlStateNormal
  buttonWithImage
end
----------------------------------------------------------------  

Run the application to make sure that everything it's going well, now we can store photos, but we do not have a place to show them, wait a minute we have 
'Photo Album', we are saved !! we just need to set collection view 'dataSource' to get the photos from the library, in order to do that open the *album_collection_view_controller.rb* file and replace the following methods

[source, ruby]
----------------------------------------------------------------
def viewDidLoad

  super()
  # Load the NIB file
  nib = UINib.nibWithNibName('PhotoCollectionCellView', bundle:nil)
  # Register this NIB which contains the cell
  self.collectionView.registerNib(nib, forCellWithReuseIdentifier:'PhotoCollectionCellView')
  self.collectionView.backgroundColor = UIColor.colorWithPatternImage(UIImage.imageNamed("bgTile"))

  @library = PhotoLibrary.alloc.init
end


def phothos 

  photosArray = @library.storedPhotos
  photosArray
end


def collectionView(collectionView, cellForItemAtIndexPath:indexPath)

  cell = collectionView.dequeueReusableCellWithReuseIdentifier('PhotoCollectionCellView' ,forIndexPath:indexPath)
  cell.customizeCollectionCell(phothos[indexPath.row])    
  cell
end
----------------------------------------------------------------

Also we have to create a method that refresh the content in the collectionView

[source, ruby]
----------------------------------------------------------------
def updateCollectionView

  self.collectionView.reloadData  
end
----------------------------------------------------------------

We should not forget to modify the custom cell to accept the object from the library, modify *collection_view_cell.rb* file and replace the 'customizeCollectionCell' method 

[source, ruby]
----------------------------------------------------------------
def customizeCollectionCell(photo)

  @photoImageView = self.viewWithTag(CELL_IMAGE_VIEW)
  @photoImageView.image = photo    
end
----------------------------------------------------------------

At last we need to modify the *album_view_controller.rb* file for reload the collection view

[source, ruby]
----------------------------------------------------------------
def loadCollectionView
  
#avoid to create the same instance of the controllers more than once
  if !@photoCollectionViewControllerr && !@photoCollectionNavigationViewController

    @photoCollectionViewController = PhotoCollectionViewController.alloc.init
    @photoCollectionNavigationViewController = UINavigationController.alloc.initWithRootViewController(@photoCollectionViewController)
  end

  @photoCollectionNavigationViewController.view.frame = self.view.bounds
  view.addSubview(@photoCollectionNavigationViewController.view)
  @photoCollectionViewController.updateCollectionView
  
  #set the current section
  @selectedRows[1] = true
  @currentSection = 1
end
----------------------------------------------------------------

Now once that you take a photo press the save button and you will be able to see it on the album view

.Save Photo
image::Resources/ch18-Sandbox/image1.png[Save Photo]

.Photo Added
image::Resources/ch18-Sandbox/image2.png[Photo Added]

Challenge - Set Photo Frame
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the UICollectionView delegate *collectionView:didSelectItemAtIndexPath:* in order to set the selected photo in the photo frame section

Challenge - Name Property
~~~~~~~~~~~~~~~~~~~~~~~~~

Connect the name property to the model in order save tha name of the picture, and add it as a label on the UICollectionView (Album)